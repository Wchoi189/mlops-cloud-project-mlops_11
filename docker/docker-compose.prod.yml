# docker/docker-compose.prod.yml
# 프로덕션 Docker Compose 구성
# 안정성, 보안, 성능에 최적화
# version: '3.8'

services:
  # MLflow 추적 서버 - 모델 버전 관리 및 실험 추적
  mlflow:
    build:
      context: ..                           # 프로젝트 루트 디렉토리
      dockerfile: docker/Dockerfile.mlflow
    image: mlops-mlflow:latest
    container_name: mlops-mlflow-prod
    ports:
      - "${MLFLOW_PORT:-5000}:5000"
      - "${MLFLOW_METRICS_PORT:-9091}:9090"
    volumes:
      - ./mlruns:/mlruns                    # MLflow 실행 기록 저장
      - ./mlartifacts:/mlartifacts          # 모델 아티팩트 저장
      - prometheus_multiproc:/tmp/prometheus_multiproc
    environment:
      - MLFLOW_BACKEND_STORE_URI=${MLFLOW_BACKEND_STORE_URI:-sqlite:////mlruns/mlflow.db}
      - MLFLOW_DEFAULT_ARTIFACT_ROOT=${MLFLOW_DEFAULT_ARTIFACT_ROOT:-./mlartifacts}
      - PROMETHEUS_MULTIPROC_DIR=${PROMETHEUS_MULTIPROC_DIR:-/tmp/prometheus_multiproc}
      - MLFLOW_HOST=${MLFLOW_HOST:-0.0.0.0}
      - MLFLOW_PORT=${MLFLOW_PORT:-5000}
    env_file:
      - production.env                      # 프로덕션 환경 변수 파일
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: ${MLFLOW_MEMORY_LIMIT:-1G}
          cpus: '${MLFLOW_CPU_LIMIT:-1.0}'
        reservations:
          memory: ${MLFLOW_MEMORY_RESERVATION:-512M}
          cpus: '${MLFLOW_CPU_RESERVATION:-0.5}'
    networks:
      - mlops-network-prod

  # API 서비스 - 모델 추론 및 예측 서비스
  api:
    build:
      context: ..                           # 프로젝트 루트 디렉토리
      dockerfile: docker/Dockerfile.api
    container_name: mlops-api-prod
    ports:
      - "${API_PORT:-8000}:8000"
    environment:
      - MLFLOW_TRACKING_URI=${MLFLOW_TRACKING_URI:-http://mlflow:5000}
      - MODEL_PATH=${MODEL_PATH:-/app/models}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DEBUG=${DEBUG:-false}               # 프로덕션에서는 디버그 모드 비활성화
      - WORKERS=${API_WORKERS:-4}           # API 워커 프로세스 수
      - MAX_WORKERS=${API_MAX_WORKERS:-8}   # 최대 워커 수
      - PROMETHEUS_MULTIPROC_DIR=${PROMETHEUS_MULTIPROC_DIR:-/tmp/prometheus_multiproc}
      - PYTHONPATH=${PYTHONPATH:-/app}
      - ENABLE_MONITORING=${ENABLE_MONITORING:-true}
    env_file:
      - production.env                      # 프로덕션 환경 변수 파일
    depends_on:
      mlflow:
        condition: service_healthy
    volumes:
      - ../models:/app/models:ro            # 모델 파일 (읽기 전용)
      - ../logs:/app/logs                   # 로그 파일
      - ../data:/app/data:ro                # 데이터 파일 (읽기 전용)
      - prometheus_multiproc:/tmp/prometheus_multiproc
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: ${API_MEMORY_LIMIT:-2G}
          cpus: '${API_CPU_LIMIT:-2.0}'
        reservations:
          memory: ${API_MEMORY_RESERVATION:-1G}
          cpus: '${API_CPU_RESERVATION:-1.0}'
    networks:
      - mlops-network-prod

  # Nginx 로드 밸런서 - 리버스 프록시 및 SSL 종료
  nginx:
    image: nginx:${NGINX_VERSION:-alpine}
    container_name: mlops-nginx-prod
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro       # SSL 인증서
    environment:
      - NGINX_HOST=${NGINX_HOST:-localhost}
      - NGINX_PORT=${NGINX_PORT:-80}
      - API_UPSTREAM=${API_UPSTREAM:-api:8000}
    env_file:
      - production.env                      # 프로덕션 환경 변수 파일
    depends_on:
      - api
    restart: unless-stopped
    profiles:
      - production                          # 프로덕션 프로파일에서만 실행
    deploy:
      resources:
        limits:
          memory: ${NGINX_MEMORY_LIMIT:-256M}
          cpus: '${NGINX_CPU_LIMIT:-0.5}'
    networks:
      - mlops-network-prod

  # 훈련 서비스 - 모델 학습 및 재훈련 (배치 작업)
  trainer:
    build:
      context: ..                           # 프로젝트 루트 디렉토리
      dockerfile: docker/Dockerfile.train
    container_name: mlops-trainer-prod
    environment:
      - MLFLOW_TRACKING_URI=${MLFLOW_TRACKING_URI:-http://mlflow:5000}
      - MODEL_PATH=${MODEL_PATH:-/app/models}
      - DATA_PATH=${DATA_PATH:-/app/data}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DEBUG=${DEBUG:-false}               # 프로덕션에서는 디버그 모드 비활성화
      - TRAINING_BATCH_SIZE=${TRAINING_BATCH_SIZE:-32}
      - TRAINING_EPOCHS=${TRAINING_EPOCHS:-10}
      - MODEL_VERSION=${MODEL_VERSION:-latest}
    env_file:
      - production.env                      # 프로덕션 환경 변수 파일
    depends_on:
      mlflow:
        condition: service_healthy
    volumes:
      - ../models:/app/models               # 모델 저장 (읽기/쓰기)
      - ../data:/app/data                   # 훈련 데이터
      - ../logs:/app/logs                   # 훈련 로그
    profiles:
      - training                            # 훈련 프로파일에서만 실행
    restart: "no"                          # 배치 작업이므로 재시작 안함
    deploy:
      resources:
        limits:
          memory: ${TRAINER_MEMORY_LIMIT:-4G}
          cpus: '${TRAINER_CPU_LIMIT:-4.0}'
        reservations:
          memory: ${TRAINER_MEMORY_RESERVATION:-2G}
          cpus: '${TRAINER_CPU_RESERVATION:-2.0}'
    networks:
      - mlops-network-prod

  # Prometheus - 메트릭 수집 및 저장
  prometheus:
    image: prom/prometheus:${PROMETHEUS_VERSION:-v2.45.0}
    container_name: mlops-prometheus-prod
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/rules:/etc/prometheus/rules:ro

      - prometheus-storage:/prometheus      # 메트릭 데이터 영구 저장
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=${PROMETHEUS_RETENTION:-15d}'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--web.external-url=http://${PROMETHEUS_EXTERNAL_HOST:-localhost}:${PROMETHEUS_PORT:-9090}'
    environment:
      - PROMETHEUS_RETENTION=${PROMETHEUS_RETENTION:-15d}
    env_file:
      - production.env                      # 프로덕션 환경 변수 파일
    profiles:
      - monitoring                          # 모니터링 프로파일에서만 실행
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: ${PROMETHEUS_MEMORY_LIMIT:-2G}
          cpus: '${PROMETHEUS_CPU_LIMIT:-1.0}'
    networks:
      - mlops-network-prod

  # Grafana - 메트릭 시각화 및 대시보드
  grafana:
    image: grafana/grafana:${GRAFANA_VERSION:-10.0.0}
    container_name: mlops-grafana-prod
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=${GF_USERS_ALLOW_SIGN_UP:-false}
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/etc/grafana/dashboards/mlops-overview.json
      - GF_SERVER_ROOT_URL=${GRAFANA_ROOT_URL:-http://localhost:3000}
      - GF_SECURITY_SECRET_KEY=${GRAFANA_SECRET_KEY:-your-secret-key}
      - GF_DATABASE_TYPE=${GRAFANA_DB_TYPE:-sqlite3}
      - GF_DATABASE_PATH=${GRAFANA_DB_PATH:-/var/lib/grafana/grafana.db}
    env_file:
      - production.env                      # 프로덕션 환경 변수 파일
    volumes:
      - grafana-storage:/var/lib/grafana    # Grafana 데이터 영구 저장
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/etc/grafana/dashboards:ro
    depends_on:
      - prometheus                          # Prometheus 의존성
    profiles:
      - monitoring                          # 모니터링 프로파일에서만 실행
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: ${GRAFANA_MEMORY_LIMIT:-1G}
          cpus: '${GRAFANA_CPU_LIMIT:-1.0}'
        reservations:
          memory: ${GRAFANA_MEMORY_RESERVATION:-512M}
          cpus: '${GRAFANA_CPU_RESERVATION:-0.5}'
    networks:
      - mlops-network-prod

  # AlertManager - 알림 및 경고 관리
  alertmanager:
    image: prom/alertmanager:${ALERTMANAGER_VERSION:-v0.25.0}
    container_name: mlops-alertmanager-prod
    ports:
      - "${ALERTMANAGER_PORT:-9093}:9093"
    volumes:
      - ./monitoring/alertmanager/alertmanager-template.yml:/etc/alertmanager/alertmanager-template.yml:ro
      - ./monitoring/alertmanager/logs:/var/log/alertmanager
      - alertmanager-storage:/alertmanager  # AlertManager 데이터 영구 저장
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://${ALERTMANAGER_EXTERNAL_HOST:-localhost}:${ALERTMANAGER_PORT:-9093}'
      - '--log.level=${ALERTMANAGER_LOG_LEVEL:-info}'
    environment:
      - SLACK_CRITICAL_WEBHOOK_URL=${SLACK_CRITICAL_WEBHOOK_URL}
      - SLACK_API_WEBHOOK_URL=${SLACK_API_WEBHOOK_URL}
      - SLACK_ML_WEBHOOK_URL=${SLACK_ML_WEBHOOK_URL}
      - SLACK_DEVOPS_WEBHOOK_URL=${SLACK_DEVOPS_WEBHOOK_URL}
      - SMTP_HOST=${SMTP_HOST}              # 이메일 알림 설정
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_FROM=${SMTP_FROM}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - WEBHOOK_URL=${WEBHOOK_URL}
    env_file:
      - production.env                      # 프로덕션 환경 변수 파일
    depends_on:
      - prometheus                          # Prometheus 의존성
    profiles:
      - monitoring                          # 모니터링 프로파일에서만 실행
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: ${ALERTMANAGER_MEMORY_LIMIT:-512M}
          cpus: '${ALERTMANAGER_CPU_LIMIT:-0.5}'
    networks:
      - mlops-network-prod

  # Node Exporter - 시스템 메트릭 수집 (CPU, 메모리, 디스크 등)
  node-exporter:
    image: prom/node-exporter:${NODE_EXPORTER_VERSION:-v1.6.0}
    container_name: mlops-node-exporter-prod
    ports:
      - "${NODE_EXPORTER_PORT:-9100}:9100"
    volumes:
      - /proc:/host/proc:ro                 # 호스트 프로세스 정보
      - /sys:/host/sys:ro                   # 호스트 시스템 정보
      - /:/rootfs:ro                        # 호스트 루트 파일시스템
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)|^/mnt/wsl'
      - '--collector.filesystem.fs-types-exclude=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$$'
    env_file:
      - production.env                      # 프로덕션 환경 변수 파일
    profiles:
      - monitoring                          # 모니터링 프로파일에서만 실행
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: ${NODE_EXPORTER_MEMORY_LIMIT:-128M}
          cpus: '${NODE_EXPORTER_CPU_LIMIT:-0.2}'
    networks:
      - mlops-network-prod

  # cAdvisor - 컨테이너 메트릭 수집 (Docker 컨테이너 리소스 사용량)
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:${CADVISOR_VERSION:-v0.47.0}
    container_name: mlops-cadvisor-prod
    ports:
      - "${CADVISOR_PORT:-8080}:8080"
    volumes:
      - /:/rootfs:ro                        # 호스트 루트 파일시스템
      - /var/run:/var/run:rw                # Docker 소켓
      - /sys:/sys:ro                        # 시스템 정보
      - /var/lib/docker/:/var/lib/docker:ro # Docker 데이터
      - /dev/disk/:/dev/disk:ro             # 디스크 정보
    devices:
      - /dev/kmsg:/dev/kmsg                 # 커널 메시지
    env_file:
      - production.env                      # 프로덕션 환경 변수 파일
    profiles:
      - monitoring                          # 모니터링 프로파일에서만 실행
    restart: unless-stopped
    privileged: true                        # 시스템 메트릭 수집을 위해 권한 필요
    deploy:
      resources:
        limits:
          memory: ${CADVISOR_MEMORY_LIMIT:-256M}
          cpus: '${CADVISOR_CPU_LIMIT:-0.3}'
    networks:
      - mlops-network-prod

  # Redis - 캐싱 및 세션 저장소 (선택사항)
  # redis:
  #   image: redis:${REDIS_VERSION:-7-alpine}
  #   container_name: mlops-redis-prod
  #   ports:
  #     - "${REDIS_PORT:-6379}:6379"
  #   command: redis-server --requirepass ${REDIS_PASSWORD:-secure-redis-password} --maxmemory ${REDIS_MAX_MEMORY:-256mb} --maxmemory-policy allkeys-lru
  #   environment:
  #     - REDIS_PASSWORD=${REDIS_PASSWORD:-secure-redis-password}
  #   env_file:
  #     - production.env                      # 프로덕션 환경 변수 파일
  #   volumes:
  #     - redis_data:/data                    # Redis 데이터 영구 저장
  #   profiles:
  #     - cache                               # 캐시 프로파일에서만 실행
  #   restart: unless-stopped
  #   deploy:
  #     resources:
  #       limits:
  #         memory: ${REDIS_MEMORY_LIMIT:-512M}
  #         cpus: '${REDIS_CPU_LIMIT:-0.5}'
  #       reservations:
  #         memory: ${REDIS_MEMORY_RESERVATION:-256M}
  #         cpus: '${REDIS_CPU_RESERVATION:-0.2}'
  #   networks:
  #     - mlops-network-prod

  # PostgreSQL - 메타데이터 및 애플리케이션 데이터 저장소 (선택사항)
  # postgres:
    # image: postgres:${POSTGRES_VERSION:-15-alpine}
    # container_name: mlops-postgres-prod
    # ports:
    #   - "${DB_PORT:-5432}:5432"
    # environment:
    #   - POSTGRES_DB=${DB_NAME:-mlops_prod}
    #   - POSTGRES_USER=${DB_USER:-mlops_user}
    #   - POSTGRES_PASSWORD=${DB_PASSWORD:-secure-db-password}
    #   - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --locale=C
    # env_file:
    #   - production.env                      # 프로덕션 환경 변수 파일
    # volumes:
    #   - postgres_data:/var/lib/postgresql/data  # PostgreSQL 데이터 영구 저장
    #   - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    # profiles:
    #   - database                            # 데이터베이스 프로파일에서만 실행
    # restart: unless-stopped
    # deploy:
    #   resources:
    #     limits:
    #       memory: ${POSTGRES_MEMORY_LIMIT:-1G}
    #       cpus: '${POSTGRES_CPU_LIMIT:-1.0}'
    #     reservations:
    #       memory: ${POSTGRES_MEMORY_RESERVATION:-512M}
    #       cpus: '${POSTGRES_CPU_RESERVATION:-0.5}'
    # networks:
    #   - mlops-network-prod
    # healthcheck:
    #   test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-mlops_user} -d ${DB_NAME:-mlops_prod}"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 5
    #   start_period: 30s

# 볼륨 정의 - 데이터 영구 저장
volumes:
  mlruns:
    driver: local                           # MLflow 실행 기록 저장
  mlartifacts:
    driver: local                           # MLflow 모델 아티팩트 저장
  prometheus-storage:
    driver: local                           # Prometheus 메트릭 데이터 저장
  prometheus_multiproc:
    driver: local                           # Prometheus 멀티프로세스 메트릭
  grafana-storage:
    driver: local                           # Grafana 설정 및 대시보드 저장
  alertmanager-storage:
    driver: local                           # AlertManager 데이터 저장
  # postgres_data:
  #   driver: local                           # PostgreSQL 데이터베이스 저장
  # redis_data:
  #   driver: local                           # Redis 캐시 데이터 저장

# 네트워크 정의 - 서비스 간 통신
networks:
  mlops-network-prod:
    driver: bridge                          # 브리지 네트워크 드라이버
    ipam:
      config:
        - subnet: ${NETWORK_SUBNET:-172.20.0.0/16}  # 사용자 정의 서브넷
    labels:
      - "com.mlops.environment=production"  # 프로덕션 환경 라벨
      - "com.mlops.project=movie-predictor" # 프로젝트 식별 라벨

# 프로파일별 실행 가이드:
# 기본 서비스 (MLflow + API):
#   docker compose -f docker-compose.prod.yml up -d
#
# 프로덕션 전체 스택 (Nginx 포함):
#   docker compose -f docker-compose.prod.yml --profile production up -d
#
# 모니터링 스택 포함:
#   docker compose -f docker-compose.prod.yml --profile production --profile monitoring up -d
#
# 데이터베이스 포함:
#   docker compose -f docker-compose.prod.yml --profile production --profile monitoring --profile database up -d
#
# 캐시 포함:
#   docker compose -f docker-compose.prod.yml --profile production --profile monitoring --profile cache up -d
#
# 모델 훈련 실행:
#   docker compose -f docker-compose.prod.yml --profile training up trainer
#
# 전체 스택 (모든 서비스):
#   docker compose -f docker-compose.prod.yml --profile production --profile monitoring --profile database --profile cache up -d    