# docker/docker-compose.monitoring.yml
# Development Docker Compose with Environment Variables

services:
  mlflow:
    build:
      context: .. # ✅ Parent directory (project root)
      dockerfile: docker/Dockerfile.mlflow
    image: mlops-mlflow:${MLFLOW_VERSION:-v2.2.0}
    container_name: mlops-mlflow-monitoring
    ports:
      - "${MLFLOW_PORT:-5000}:5000"
      - "${MLFLOW_METRICS_PORT:-9091}:9090"
    volumes:
      - ./mlruns:/mlruns # ✅ Relative to docker/ directory
      - ./mlartifacts:/mlartifacts # ✅ Relative to docker/ directory
      - prometheus_multiproc:/tmp/prometheus_multiproc
    environment:
      - MLFLOW_BACKEND_STORE_URI=${MLFLOW_BACKEND_STORE_URI:-sqlite:////mlruns/mlflow.db}
      - MLFLOW_DEFAULT_ARTIFACT_ROOT=${MLFLOW_DEFAULT_ARTIFACT_ROOT:-./mlartifacts}
      - PROMETHEUS_MULTIPROC_DIR=${PROMETHEUS_MULTIPROC_DIR:-/tmp/prometheus_multiproc}
      - MLFLOW_HOST=${MLFLOW_HOST:-0.0.0.0}
      - MLFLOW_PORT=${MLFLOW_PORT:-5000}
    env_file:
      - monitoring.env # ✅ File in same directory as compose file
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:5000/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    networks:
      - mlops-network

  api:
    build:
      context: .. # ✅ Parent directory (project root)
      dockerfile: docker/Dockerfile.api
    container_name: mlops-api-monitoring
    ports:
      - "${API_PORT:-8000}:8000"
    environment:
      - MLFLOW_TRACKING_URI=${MLFLOW_TRACKING_URI:-http://mlflow:5000}
      - MODEL_PATH=${MODEL_PATH:-/app/models}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - PROMETHEUS_MULTIPROC_DIR=${PROMETHEUS_MULTIPROC_DIR:-/tmp/prometheus_multiproc}
      - PYTHONPATH=${PYTHONPATH:-/app}
      - ENABLE_MONITORING=${ENABLE_MONITORING:-true}
      - DEBUG=${DEBUG:-true}
    env_file:
      - monitoring.env # ✅ File in same directory as compose file
    command: uvicorn src.api.main_with_metrics:app --host 0.0.0.0 --port 8000 --reload
    depends_on:
      mlflow:
        condition: service_healthy
      prometheus:
        condition: service_started
    volumes:
      - ../models:/app/models:ro # ✅ Go up to project root, then to models
      - ../logs:/app/logs # ✅ Go up to project root, then to logs
      - ../data:/app/data:ro # ✅ Go up to project root, then to data
      - ../src:/app/src # ✅ Go up to project root, then to src
      - prometheus_multiproc:/tmp/prometheus_multiproc
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    restart: unless-stopped
    networks:
      - mlops-network

  prometheus:
    image: prom/prometheus:${PROMETHEUS_VERSION:-v2.45.0}
    container_name: mlops-prometheus-monitoring
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/rules:/etc/prometheus/rules:ro
      - prometheus-storage:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--storage.tsdb.retention.time=${PROMETHEUS_RETENTION:-30d}"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--web.enable-lifecycle"
      - "--web.enable-admin-api"
    env_file:
      - monitoring.env # ✅ File in same directory as compose file
    restart: unless-stopped
    networks:
      - mlops-network

  grafana:
    image: grafana/grafana:${GRAFANA_VERSION:-10.0.0}
    container_name: mlops-grafana-monitoring
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=${GF_USERS_ALLOW_SIGN_UP:-false}
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/etc/grafana/dashboards/mlops-overview.json
    env_file:
      - monitoring.env # ✅ Fixed typo and path
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/etc/grafana/dashboards:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - mlops-network

  alertmanager:
    build:
      context: ..
      dockerfile: docker/monitoring/alertmanager/Dockerfile
    image: prom/alertmanager:${ALERTMANAGER_VERSION:-v0.25.0}
    container_name: mlops-alertmanager-monitoring
    ports:
      - "${ALERTMANAGER_PORT:-9093}:9093"
    environment:
      - SLACK_CRITICAL_WEBHOOK_URL=${SLACK_CRITICAL_WEBHOOK_URL}
      - SLACK_API_WEBHOOK_URL=${SLACK_API_WEBHOOK_URL}
      - SLACK_ML_WEBHOOK_URL=${SLACK_ML_WEBHOOK_URL}
      - SLACK_DEVOPS_WEBHOOK_URL=${SLACK_DEVOPS_WEBHOOK_URL}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_FROM=${SMTP_FROM}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - WEBHOOK_URL=${WEBHOOK_URL}
    env_file:
      - monitoring.env
    volumes:
      - ./monitoring/alertmanager/alertmanager-template.yml:/etc/alertmanager/alertmanager-template.yml:ro
      - ./monitoring/alertmanager/logs:/var/log/alertmanager
      - alertmanager-storage:/alertmanager
    restart: unless-stopped
    networks:
      - mlops-network
    healthcheck:
      test: [ "CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9093/-/healthy" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  node-exporter:
    image: prom/node-exporter:${NODE_EXPORTER_VERSION:-v1.6.0}
    container_name: mlops-node-exporter-monitoring
    ports:
      - "${NODE_EXPORTER_PORT:-9100}:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - "--path.procfs=/host/proc"
      - "--path.rootfs=/rootfs"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)|^/mnt/wsl"
      - "--collector.filesystem.fs-types-exclude=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$$"
    env_file:
      - monitoring.env
    networks:
      - mlops-network

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:${CADVISOR_VERSION:-v0.47.0}
    container_name: mlops-cadvisor-monitoring
    ports:
      - "${CADVISOR_PORT:-8080}:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    devices:
      - /dev/kmsg:/dev/kmsg
    env_file:
      - monitoring.env
    restart: unless-stopped
    privileged: true
    networks:
      - mlops-network

volumes:
  prometheus-storage:
  prometheus_multiproc:
  grafana-storage:
  alertmanager-storage:


networks:
  mlops-network:
    driver: bridge
